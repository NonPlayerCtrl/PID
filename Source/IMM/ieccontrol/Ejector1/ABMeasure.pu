IMPORT_OVER_LISTFILE
 GET_MY_FU_NAME
, KSWO_AddVariable
, WRITE_SVREAL_DIRECT
, FAddToScopeGroup
, START_PROCESS_ALGORITHM
, STOP_PROCESS_ALGORITHM
, KAPPL_LintabData
, KAPPL_MeasureMonitoring
, KSWO_Status
, ABMeasureAI
, TON

END_IMPORT

ALGORITHM_BLOCK ABMeasure #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_EjectorLintab : KAPPL_LintabData;
 sv_rEjectorPosition : REAL;
 ai_Position : REAL;
 sv_bTransducerError : BOOL;
 sv_bDeviceReady : BOOL;
 sv_rEjectorVelocity : REAL;
 sv_EjectorMonitorMeas : KAPPL_MeasureMonitoring;
 sv_Ek : REAL;
 sv_Ek_1 : REAL;
 sv_Ek_2 : REAL;
 sv_Uk : REAL;
 sv_Ui : REAL;
 sv_Uk_1 : REAL;
 sv_Uk_2 : REAL;
 sv_Uk_3 : REAL;
 di_ButtonBwd : BOOL (* Panelbutton *);
 di_ButtonFwd : BOOL (* Panelbutton *);
 ao_pid : REAL;
 ai_pid : REAL;
END_VAR

SYSTEM_OBJECT
 TaskAnalog : TASK;
 TaskSlow : TASK;
 PU_Task_7 : TASK;
END_OBJECT

VAR
 t : REAL;
 T : REAL;
 Kp : REAL;
 Ti : REAL;
 ti : REAL;
 Td : REAL;
 td : REAL;
 A : REAL;
 B : REAL;
 C : REAL;
 PWMPeriod : TIME;
 T_PID : REAL;
 L_T : REAL;
 H_T : REAL;
 DutyRatio : REAL;
END_VAR

PROCESS_ALGORITHM paInitDebugMeasurement ON TaskSlow AUTOSTART


VAR
 fuName : STRING(255);
 variableName : STRING(255);
 swoState : KSWO_Status;
 b : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
fuName := GET_MY_FU_NAME();
variableName := CONCAT(fuName,'.rPosition mm');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rEjectorPosition);
b := FAddToScopeGroup(Task := TaskAnalog, 
                      Name := variableName, 
                      GroupId := cScopeGroupEjector);
variableName := CONCAT(fuName,'.rVelocity mm/s');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rEjectorVelocity);
b := FAddToScopeGroup(Task := TaskAnalog, 
                      Name := variableName, 
                      GroupId := cScopeGroupEjector);


    variableName := CONCAT(fuName,'.sv_Ek');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_Ek);





    variableName := CONCAT(fuName,'.sv_Uk');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_Uk);



    variableName := CONCAT(fuName,'.sv_Ui');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_Ui);




    variableName := CONCAT(fuName,'.ao_pid');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := ao_pid);





    variableName := CONCAT(fuName,'.ai_pid');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := ai_pid);














STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paMeasure ON TaskAnalog AUTOSTART


VAR_TEMP
 b : BOOL;
END_VAR

VAR
 abEjectorMeasure : ABMeasureAI;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Start:
END_STEP


(* steps *)
STEP S_Stop:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStop*)
STEP S_Init:
AInitMeasureBlock (P);
END_STEP

STEP S_Measure:
AMeasure (N);
END_STEP


(* transitions *)
TRANSITION TLinked (* TLinked *) FROM S_Start TO S_Init :=  #BEGIN_EDIT_BLOCK
IS_LINKED(ai_Position)
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TNotLinked (* TNotLinked *) FROM S_Start TO S_Stop :=  #BEGIN_EDIT_BLOCK
NOT IS_LINKED(ai_Position)
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TStop (* TStop *) FROM S_Stop TO S_Start :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TInitDone (* TInitDone *) FROM S_Init TO S_Measure :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION AMeasure: #BEGIN_EDIT_BLOCK

abEjectorMeasure.aRun(bIdle := sv_bDeviceReady);
sv_bTransducerError := abEjectorMeasure.aRun.bSensorError;
b := WRITE_SVREAL_DIRECT(sv_rEjectorPosition, abEjectorMeasure.aRun.rValue);
b := WRITE_SVREAL_DIRECT(sv_rEjectorVelocity, abEjectorMeasure.aRun.rVelocity);

;#END_EDIT_BLOCK END_ACTION (*AMeasure*)
ACTION AInitMeasureBlock: #BEGIN_EDIT_BLOCK

abEjectorMeasure.aInit(sRawValue := 'Ejector1.ai_Position',
                        pLintab := @sv_EjectorLintab);

abEjectorMeasure.aInitMonitoring(bEnable := sv_EjectorMonitorMeas.EnableMonitoring,
                                 rLowLimit := sv_EjectorMonitorMeas.LowerLimit,
                                 bLimitation := sv_EjectorMonitorMeas.Limitation,
                                 rFailureFactor := sv_EjectorMonitorMeas.FailureFactor);

;#END_EDIT_BLOCK END_ACTION (*AInitMeasureBlock*)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paPID ON TaskAnalog


(* IecGraph-Code *)

(* init step *)
INITIAL_STEP Step1:
Action223 (P);
END_STEP

ACTION Action223: #BEGIN_EDIT_BLOCK
ai_pid := 10.0;
t := 0.2;
td := 2.0;
ti := 0.05;
Kp := 0.2;

;#END_EDIT_BLOCK END_ACTION (*Action223*)

(* steps *)
STEP Step2:
Action2 (P);
END_STEP

ACTION Action2: #BEGIN_EDIT_BLOCK
sv_Ek := 0.0;
sv_Ek_1 := 0.0;
sv_Ek_2 := 0.0;
sv_Uk := 0.0;
sv_Uk_1 := 0.0;
sv_Uk_2 := 0.0;
sv_Uk_3 := 0.0;



;#END_EDIT_BLOCK END_ACTION (*Action2*)
STEP Step4:
END_STEP

STEP Step3:
Action3 (P);
END_STEP

ACTION Action3: #BEGIN_EDIT_BLOCK
T := 1.0/t;
Td := 1.0/td;
Ti := 1.0/ti;
A := Kp*(1.0 + T/Ti + Td/T);
B := Kp*(1.0 + 2.0*Td/T);
C := Kp*Td/T;
sv_Uk_3 := sv_Uk_2;
sv_Uk_2 := sv_Uk_1;
sv_Uk_1 := sv_Uk;
sv_Ek_2 := sv_Ek_1;
sv_Ek_1 := sv_Ek;
sv_Ek := ai_pid - sv_Uk;
sv_Ui := A*sv_Ek + B*sv_Ek_1 + C*sv_Ek_2;
ao_pid := sv_Uk_1 + sv_Ui;
sv_Uk := sv_Uk_1 + sv_Ui;



;#END_EDIT_BLOCK END_ACTION (*Action3*)

(* transitions *)
GO_ON_TRANSITION Trans1 (* Trans1 *) FROM Step1 TO Step2 :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans4 (* Trans4 *) FROM Step2 TO Step4 :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans2 (* Trans2 *) FROM Step4 TO Step3 :=  #BEGIN_EDIT_BLOCK
Step4.T > t#0.2s
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans5 (* Trans5 *) FROM Step3 TO Step4 :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM p ON PU_Task_7 WITH di_ButtonBwd,di_ButtonFwd

#BEGIN_EDIT_BLOCK

IF di_ButtonFwd THEN
   START_PROCESS_ALGORITHM(paPID);
   START_PROCESS_ALGORITHM(paPWM);

END_IF;

IF di_ButtonBwd THEN
   STOP_PROCESS_ALGORITHM(paPID);
   STOP_PROCESS_ALGORITHM(paPWM);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paPWM ON TaskAnalog


VAR
 fbTON : TON;
 do : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP Step1:
Action20 (P);
END_STEP

ACTION Action20: #BEGIN_EDIT_BLOCK
PWMPeriod := t#2s;

;#END_EDIT_BLOCK END_ACTION (*Action20*)

(* steps *)
STEP Step2:
Action2 (P);
END_STEP

ACTION Action2: #BEGIN_EDIT_BLOCK
T_PID := ao_pid;
L_T := 8.0;
H_T := 10.0;
IF T_PID < L_T THEN
   DutyRatio := 1.0;
ELSE IF T_PID >= H_T - 0.1 THEN
   DutyRatio := 0.0;
ELSE
   DutyRatio := (T_PID - L_T) /(H_T - L_T);   
END_IF;   
END_IF;
fbTON(IN := FALSE);

;#END_EDIT_BLOCK END_ACTION (*Action2*)
STEP Step5:
Action3 (N);
END_STEP

ACTION Action3: #BEGIN_EDIT_BLOCK
fbTON(IN := TRUE,
     // PT := REAL_TO_TIME(TIME_TO_REAL(PWMPeriod) * DutyRatio);
            PT := PWMPeriod * DutyRatio);
IF fbTON.Q THEN
   do := FALSE;
ELSE
   do := TRUE;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action3*)
STEP Step3:
END_STEP


(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM Step1 TO Step2 :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans2 (* Trans2 *) FROM Step2 TO Step5 :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans11 (* Trans11 *) FROM Step5 TO Step3 :=  #BEGIN_EDIT_BLOCK
Step5.T > PWMPeriod
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans12 (* Trans12 *) FROM Step3 TO Step2 :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 103 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
6 
@Var @RT(14)GET_MY_FU_NAME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)KSWO_AddVariable @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)WRITE_SVREAL_DIRECT @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)FAddToScopeGroup @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(9)ABMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
37 
@Var @RT(16)sv_EjectorLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rEjectorPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)ai_Position @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_bTransducerError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rEjectorVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_EjectorMonitorMeas @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)KAPPL_MeasureMonitoring @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(5)sv_Ek @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)sv_Ek_1 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)sv_Ek_2 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(5)sv_Uk @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(5)sv_Ui @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)sv_Uk_1 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)sv_Uk_2 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)sv_Uk_3 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)T @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)Kp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)Ti @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)ti @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)Td @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)td @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)A @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)B @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)C @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)di_ButtonBwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(11)Panelbutton @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)di_ButtonFwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(11)Panelbutton @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(6)ao_pid @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(6)ai_pid @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PWMPeriod @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)T_PID @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)L_T @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)H_T @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)DutyRatio @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(22)paInitDebugMeasurement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(6)fuName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)variableName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)swoState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(9)paMeasure @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskAnalog @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(16)abEjectorMeasure @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)ABMeasureAI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paPID @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskAnalog @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(1)p @STRUCTURED_TEXT 
@RT(0) @RT(25)di_ButtonBwd,di_ButtonFwd @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paPWM @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskAnalog @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(5)fbTON @RT(0) @T @T @DERIVED 0 @F @RT(3)TON @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)do @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(70)
fuName := GET_MY_FU_NAME();
variableName := CONCAT(fuName,'.rPosition mm');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rEjectorPosition);
b := FAddToScopeGroup(Task := TaskAnalog, 
                      Name := variableName, 
                      GroupId := cScopeGroupEjector);
variableName := CONCAT(fuName,'.rVelocity mm/s');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rEjectorVelocity);
b := FAddToScopeGroup(Task := TaskAnalog, 
                      Name := variableName, 
                      GroupId := cScopeGroupEjector);


    variableName := CONCAT(fuName,'.sv_Ek');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_Ek);





    variableName := CONCAT(fuName,'.sv_Uk');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_Uk);



    variableName := CONCAT(fuName,'.sv_Ui');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_Ui);




    variableName := CONCAT(fuName,'.ao_pid');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := ao_pid);





    variableName := CONCAT(fuName,'.ai_pid');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := ai_pid);














STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
4 6 5 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(7)S_Start @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)TLinked @F @T @F @F @T @T @TL(2)
IS_LINKED(ai_Position)

@RT(7)TLinked @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(10)TNotLinked @F @T @F @F @T @T @TL(2)
NOT IS_LINKED(ai_Position)

@RT(10)TNotLinked @F 
@Step @RT(6)S_Stop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(5)TStop @F @T @F @F @T @T @TL(2)
TRUE

@RT(5)TStop @F 
@Goto @RT(7)S_Start @F @F 


@Step @RT(6)S_Init @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)AInitMeasureBlock @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(9)TInitDone @F @T @F @F @T @T @TL(2)
TRUE

@RT(9)TInitDone @F 
@Step @RT(9)S_Measure @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)AMeasure @F @F @RT(1)N @RT(0) @F @F @F @F 

@END_SfcData 
@SaActions 2 
@SaText @RT(8)AMeasure 1 @TL(6)

abEjectorMeasure.aRun(bIdle := sv_bDeviceReady);
sv_bTransducerError := abEjectorMeasure.aRun.bSensorError;
b := WRITE_SVREAL_DIRECT(sv_rEjectorPosition, abEjectorMeasure.aRun.rValue);
b := WRITE_SVREAL_DIRECT(sv_rEjectorVelocity, abEjectorMeasure.aRun.rVelocity);


@SaText @RT(17)AInitMeasureBlock 1 @TL(9)

abEjectorMeasure.aInit(sRawValue := 'Ejector1.ai_Position',
                        pLintab := @sv_EjectorLintab);

abEjectorMeasure.aInitMonitoring(bEnable := sv_EjectorMonitorMeas.EnableMonitoring,
                                 rLowLimit := sv_EjectorMonitorMeas.LowerLimit,
                                 bLimitation := sv_EjectorMonitorMeas.Limitation,
                                 rFailureFactor := sv_EjectorMonitorMeas.FailureFactor);


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
5 5 6 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(5)Step1 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)Action223 @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
ai_pid := 10.0;
t := 0.2;
td := 2.0;
ti := 0.05;
Kp := 0.2;

@F 

@Trans @RT(6)Trans1 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans1 @F 
@Step @RT(5)Step2 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action2 @F @T @RT(1)P @RT(0) @F @F @T @TL(10)
sv_Ek := 0.0;
sv_Ek_1 := 0.0;
sv_Ek_2 := 0.0;
sv_Uk := 0.0;
sv_Uk_1 := 0.0;
sv_Uk_2 := 0.0;
sv_Uk_3 := 0.0;



@F 

@Trans @RT(6)Trans4 @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans4 @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 3 
@Step @RT(5)Step4 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(6)Trans2 @F @T @F @F @T @T @TL(2)
Step4.T > t#0.2s

@RT(6)Trans2 @F 
@Step @RT(5)Step3 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action3 @F @T @RT(1)P @RT(0) @F @F @T @TL(18)
T := 1.0/t;
Td := 1.0/td;
Ti := 1.0/ti;
A := Kp*(1.0 + T/Ti + Td/T);
B := Kp*(1.0 + 2.0*Td/T);
C := Kp*Td/T;
sv_Uk_3 := sv_Uk_2;
sv_Uk_2 := sv_Uk_1;
sv_Uk_1 := sv_Uk;
sv_Ek_2 := sv_Ek_1;
sv_Ek_1 := sv_Ek;
sv_Ek := ai_pid - sv_Uk;
sv_Ui := A*sv_Ek + B*sv_Ek_1 + C*sv_Ek_2;
ao_pid := sv_Uk_1 + sv_Ui;
sv_Uk := sv_Uk_1 + sv_Ui;



@F 


@Trans @RT(6)Trans5 @F @T @T @T @T @F @TL(2)
TRUE

@RT(6)Trans5 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(12)

IF di_ButtonFwd THEN
   START_PROCESS_ALGORITHM(paPID);
   START_PROCESS_ALGORITHM(paPWM);

END_IF;

IF di_ButtonBwd THEN
   STOP_PROCESS_ALGORITHM(paPID);
   STOP_PROCESS_ALGORITHM(paPWM);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
8 7 13 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(5)Step1 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action20 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
PWMPeriod := t#2s;

@F 

@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans1 @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(5)Step2 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action2 @F @T @RT(1)P @RT(0) @F @F @T @TL(13)
T_PID := ao_pid;
L_T := 8.0;
H_T := 10.0;
IF T_PID < L_T THEN
   DutyRatio := 1.0;
ELSE IF T_PID >= H_T - 0.1 THEN
   DutyRatio := 0.0;
ELSE
   DutyRatio := (T_PID - L_T) /(H_T - L_T);   
END_IF;   
END_IF;
fbTON(IN := FALSE);

@F 

@Trans @RT(6)Trans2 @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans2 @F 
@Step @RT(5)Step5 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action3 @F @T @RT(1)N @RT(0) @F @F @T @TL(9)
fbTON(IN := TRUE,
     // PT := REAL_TO_TIME(TIME_TO_REAL(PWMPeriod) * DutyRatio);
            PT := PWMPeriod * DutyRatio);
IF fbTON.Q THEN
   do := FALSE;
ELSE
   do := TRUE;
END_IF;

@F 

@Trans @RT(7)Trans11 @F @T @F @F @T @T @TL(2)
Step5.T > PWMPeriod

@RT(7)Trans11 @F 
@Step @RT(5)Step3 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 


@Trans @RT(7)Trans12 @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans12 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
